>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> try:
...     bg.area()
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[Exception] area() is not implemented

>>> try:
...     bg.integer_validator("value", 10)
...     print("Validation successful for value=10")
... except Exception as e:
...     print(f"Validation failed for value=10: [{e.__class__.__name__}] {e}")
Validation successful for value=10

>>> try:
...     bg.integer_validator("my_int", 1)
...     print("Validation successful for my_int=1")
... except Exception as e:
...     print(f"Validation failed for my_int=1: [{e.__class__.__name__}] {e}")
Validation successful for my_int=1

>>> try:
...     bg.integer_validator("width", 0)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[ValueError] width must be greater than 0

>>> try:
...     bg.integer_validator("height", -5)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[ValueError] height must be greater than 0

>>> try:
...     bg.integer_validator("size", "not an int")
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] size must be an integer

>>> try:
...     bg.integer_validator("length", 10.5)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] length must be an integer

>>> try:
...     bg.integer_validator("age", True)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
Validation successful for age=True